declare class DrapoBehaviorHandler {
    private _application;
    private _drag;
    get Application(): DrapoApplication;
    constructor(application: DrapoApplication);
    HasContentBehaviorContext(content: string): boolean;
    ResolveBehavior(el: HTMLElement, canBind?: boolean, canSubscribeDelay?: boolean, dataKeyFilter?: string, dataFieldFilter?: string): Promise<void>;
    ResolveBehaviorContext(context: DrapoContext, element: HTMLElement, canBind: boolean): Promise<void>;
    private ResolveBehaviorDragStart;
    private ResolveBehaviorDragEnd;
    private ResolveBehaviorDragStartContext;
    private ResolveBehaviorDragEndContext;
    ResolveBehaviorDragEndDrop(e: any, item: DrapoContextItem, tags: string[], notify: boolean, dataKey: string, sector: string, onBefore: string, onAfter: string): Promise<void>;
    ResolveBehaviorDragStartOnBefore(dragBefore: DrapoDrag, dragAfter: DrapoDrag): Promise<void>;
    ResolveBehaviorDragEndOnAfter(dragBefore: DrapoDrag, dragAfter: DrapoDrag): Promise<void>;
    GetDrag(): DrapoDrag;
    SetDrag(drag: DrapoDrag): void;
    private IsDragMatch;
    private CreateDrag;
    private IsMoveDrag;
    private MoveDrag;
    private IsInternalDrag;
    private IsSwapDrag;
    private SwapDrag;
    private IsCustomDrag;
    private CustomDrag;
    private ResolveBehaviorResizeContext;
    ResolveBehaviorResize(el: HTMLElement, canBind?: boolean, canSubscribeDelay?: boolean, dataKeyFilter?: string, dataFieldFilter?: string): Promise<void>;
    private ResolveBehaviorResizeInternal;
    private CreateResize;
    private ResolveBehaviorResizeStart;
    private ResolveBehaviorResizeContinue;
    private ResolveBehaviorResizeFinish;
    private GetSize;
    private GetSizeUnit;
    private IsClassBootstrap;
    private CreateClassBootstrap;
    private EndsWith;
    private GetSizeValue;
    private GetSizeStartWithOffset;
    private GetResizerOffset;
    private GetResizerEventValue;
    private ApplySizeNew;
}
